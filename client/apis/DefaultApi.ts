/* tslint:disable */
/* eslint-disable */
/**
 * assignment-1
 * This is a template repository for the first assignment in BVD 103 at McMaster Continuing Education.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrUpdateBookStockRequest,
  CreateOrderRequest,
  FulfillOrderRequest,
} from '../models/index';
import {
    CreateOrUpdateBookStockRequestFromJSON,
    CreateOrUpdateBookStockRequestToJSON,
    CreateOrderRequestFromJSON,
    CreateOrderRequestToJSON,
    FulfillOrderRequestFromJSON,
    FulfillOrderRequestToJSON,
} from '../models/index';

export interface CreateOrUpdateBookStockOperationRequest {
    createOrUpdateBookStockRequest: CreateOrUpdateBookStockRequest;
}

export interface CreateOrderOperationRequest {
    createOrderRequest: CreateOrderRequest;
}

export interface FulfillOrderOperationRequest {
    orderId: string;
    fulfillOrderRequest: FulfillOrderRequest;
}

export interface GetBookOnShelfRequest {
    bookId: string;
}

export interface GetGreetingRequest {
    name: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createOrUpdateBookStockRaw(requestParameters: CreateOrUpdateBookStockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['createOrUpdateBookStockRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrUpdateBookStockRequest',
                'Required parameter "createOrUpdateBookStockRequest" was null or undefined when calling createOrUpdateBookStock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/warehouse`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateBookStockRequestToJSON(requestParameters['createOrUpdateBookStockRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createOrUpdateBookStock(requestParameters: CreateOrUpdateBookStockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createOrUpdateBookStockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createOrderRaw(requestParameters: CreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['createOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'createOrderRequest',
                'Required parameter "createOrderRequest" was null or undefined when calling createOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderRequestToJSON(requestParameters['createOrderRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createOrder(requestParameters: CreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async fulfillOrderRaw(requestParameters: FulfillOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling fulfillOrder().'
            );
        }

        if (requestParameters['fulfillOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'fulfillOrderRequest',
                'Required parameter "fulfillOrderRequest" was null or undefined when calling fulfillOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/warehouse/fulfill/{orderId}`;
        urlPath = urlPath.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillOrderRequestToJSON(requestParameters['fulfillOrderRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async fulfillOrder(requestParameters: FulfillOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.fulfillOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBookOnShelfRaw(requestParameters: GetBookOnShelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling getBookOnShelf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/warehouse/{bookId}`;
        urlPath = urlPath.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getBookOnShelf(requestParameters: GetBookOnShelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBookOnShelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGreetingRaw(requestParameters: GetGreetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getGreeting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/hello/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getGreeting(requestParameters: GetGreetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getGreetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getOrdersRaw(initOverrides);
        return await response.value();
    }

}
